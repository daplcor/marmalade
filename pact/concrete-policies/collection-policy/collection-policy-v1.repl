;;load policy manager, ledger
(load "../../policy-manager/policy-manager.repl")
(typecheck "marmalade-v2.collection-policy-v1")

(begin-tx)
(use marmalade-v2.policy-manager [ NON_FUNGIBLE_POLICY ROYALTY_POLICY COLLECTION_POLICY])
(commit-tx)

(begin-tx)
  (env-data {
    "creator-guard": {"keys": ["creator"], "pred": "keys-all"}
  })
  (coin.create-account "k:creator" (read-keyset 'creator-guard))
(commit-tx)

(begin-tx "Creating collection fails without operator guard")
  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-v2.util-v1)
  (env-data {
    "ks": {"keys": ["operator"], "pred": "keys-all"}
  })

 (expect-failure "create collection fails if operator guard isn't present"
    "Keyset failure"
    (marmalade-v2.collection-policy-v1.create-collection "test-collection0" 10 (read-keyset 'ks )))
(rollback-tx)

(begin-tx "Creating collection")
  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-v2.util-v1)
  (env-data {
    "token-id": (create-token-id { 'uri: "test-collection-royalty-uri", 'precision: 0, 'policies: (create-policies DEFAULT_COLLECTION_ROYALTY) } )
  ,"account": "k:account"
  ,"account-guard": {"keys": ["account"], "pred": "keys-all"}
  ,"royalty_spec": {
      "fungible": coin
    ,"creator": "k:creator"
    ,"creator-guard":  {"keys": ["creator"], "pred": "keys-all"}
    ,"royalty-rate": 0.05
    }
  ,"collection_id": "collection:lUAvkHxqGSH22Z7zLMljdmHlFZ-DvfuVYdC0ioHCfqk"
  ,"ks": {"keys": ["operator"], "pred": "keys-all"}
  })

  (expect "collection id generation based on name and operator"
    "collection:lUAvkHxqGSH22Z7zLMljdmHlFZ-DvfuVYdC0ioHCfqk"
    (marmalade-v2.collection-policy-v1.create-collection-id "test-collection0" (read-keyset 'ks )))

  (env-sigs [
    { 'key: 'operator
    ,'caps: [(marmalade-v2.collection-policy-v1.COLLECTION "collection:lUAvkHxqGSH22Z7zLMljdmHlFZ-DvfuVYdC0ioHCfqk" "test-collection0" 10 (read-keyset 'ks ))]
    }])

  (expect "initiate a collection with `create-collection`"
    true
    (marmalade-v2.collection-policy-v1.create-collection "test-collection0" 10 (read-keyset 'ks )))
(commit-tx)

(begin-tx "Create token without operator guard fails")
  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-v2.util-v1)

  (env-sigs [])

 (expect-failure "create token fails if operator guard isn't present"
   "Keyset failure"
   (create-token (read-msg 'token-id) 0 "test-collection-royalty-uri" (create-policies DEFAULT_COLLECTION_ROYALTY) ))
(rollback-tx)

(begin-tx "Create token")
  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-v2.util-v1)

  (env-sigs [
    { 'key: 'operator
    ,'caps: [(marmalade-v2.collection-policy-v1.OPERATOR "collection:lUAvkHxqGSH22Z7zLMljdmHlFZ-DvfuVYdC0ioHCfqk")]
    }])

  (expect "create a default token with collection-policy, quote-policy, non-fungible-policy, royalty-policy"
    true
    (create-token (read-msg 'token-id) 0 "test-collection-royalty-uri" (create-policies DEFAULT_COLLECTION_ROYALTY) ))

(commit-tx)

(begin-tx "Mint token without mint-guard fails")
  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)

  (env-sigs [
    { 'key: 'account1
    ,'caps: [(marmalade-v2.ledger.MINT (read-msg 'token-id) "k:account" 1.0)]
    }])

  (expect "mint a default token with collection-policy, quote-policy, non-fungible-policy, royalty-policy"
    true
    (marmalade-v2.ledger.mint (read-msg 'token-id )  (read-msg 'account ) (read-keyset 'account-guard ) 1.0))

  (expect "collection should be present and size should be updated"
    {
      "id": "collection:lUAvkHxqGSH22Z7zLMljdmHlFZ-DvfuVYdC0ioHCfqk"
      ,"name": "test-collection0"
      ,"size": 1
      ,"max-size": 10
      ,"operator-guard": (read-keyset 'ks )
    }
    (marmalade-v2.collection-policy-v1.get-collection (read-msg 'collection_id)))

  (expect "token should be part of collection"
    {
      "id": (read-msg 'token-id)
     ,"collection-id": "collection:lUAvkHxqGSH22Z7zLMljdmHlFZ-DvfuVYdC0ioHCfqk"
    }
    (marmalade-v2.collection-policy-v1.get-token (read-msg 'token-id))
  )
(commit-tx)

(begin-tx "Creating collection and validate size")
  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-v2.util-v1)

  (env-data {
    "token-id1": (create-token-id { 'uri: "test-collection-size-uri1", 'precision: 0, 'policies: (create-policies DEFAULT_COLLECTION_ROYALTY) } )
  ,"token-id2": (create-token-id { 'uri: "test-collection-size-uri2", 'precision: 0, 'policies: (create-policies DEFAULT_COLLECTION_ROYALTY) } )
  ,"account": "k:account"
  ,"account-guard": {"keys": ["account"], "pred": "keys-all"}
  ,"royalty_spec": {
      "fungible": coin
    ,"creator": "k:creator"
    ,"creator-guard":  {"keys": ["creator"], "pred": "keys-all"}
    ,"royalty-rate": 0.05
    }
  ,"collection_id": "collection:aHZrcOD_nHHHiEQgIhdfjcWfUKcD1dvsdG00tE4fAC8"
  ,"ks": {"keys": ["operator"], "pred": "keys-all"}
  })

  (env-sigs [
      { 'key: 'operator
      ,'caps: [(marmalade-v2.collection-policy-v1.COLLECTION "collection:aHZrcOD_nHHHiEQgIhdfjcWfUKcD1dvsdG00tE4fAC8" "test-collection-size" 1 (read-keyset 'ks ))]
      }])

  (expect "initiate a collection with `create-collection`"
    true
    (marmalade-v2.collection-policy-v1.create-collection "test-collection-size" 1 (read-keyset 'ks )))

  (env-sigs [
    { 'key: 'operator
    ,'caps: [(marmalade-v2.collection-policy-v1.OPERATOR "collection:aHZrcOD_nHHHiEQgIhdfjcWfUKcD1dvsdG00tE4fAC8")]
    }])

  (expect "create a default token with collection-policy, quote-policy, non-fungible-policy, royalty-policy"
    true
    (create-token (read-msg 'token-id1) 0 "test-collection-size-uri1" (create-policies DEFAULT_COLLECTION_ROYALTY) ))

  (expect-failure "creating another token will exceed collection-size"
    "Exceeds collection size"
    (create-token (read-msg 'token-id2) 0 "test-collection-size-uri2" (create-policies DEFAULT_COLLECTION_ROYALTY) ))
(rollback-tx)

(begin-tx "Create collection with unlimited size and add two tokens")
  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-v2.util-v1)

  (env-data {
    "token-id1": (create-token-id { 'uri: "test-collection-size-uri1", 'precision: 0, 'policies: (create-policies DEFAULT_COLLECTION_ROYALTY) } )
  ,"token-id2": (create-token-id { 'uri: "test-collection-size-uri2", 'precision: 0, 'policies: (create-policies DEFAULT_COLLECTION_ROYALTY) } )
  ,"account": "k:account"
  ,"account-guard": {"keys": ["account"], "pred": "keys-all"}
  ,"royalty_spec": {
      "fungible": coin
    ,"creator": "k:creator"
    ,"creator-guard":  {"keys": ["creator"], "pred": "keys-all"}
    ,"royalty-rate": 0.05
    }
  ,"collection_id": "collection:aHZrcOD_nHHHiEQgIhdfjcWfUKcD1dvsdG00tE4fAC8"
  ,"ks": {"keys": ["operator"], "pred": "keys-all"}
  })

  (env-sigs [
      { 'key: 'operator
      ,'caps: [(marmalade-v2.collection-policy-v1.OPERATOR "collection:aHZrcOD_nHHHiEQgIhdfjcWfUKcD1dvsdG00tE4fAC8")],'caps: [(marmalade-v2.collection-policy-v1.COLLECTION "collection:aHZrcOD_nHHHiEQgIhdfjcWfUKcD1dvsdG00tE4fAC8" "test-collection-size" 0 (read-keyset 'ks ))]
      }])

  (expect "initiate a collection with `create-collection`"
    true
    (marmalade-v2.collection-policy-v1.create-collection "test-collection-size" 0 (read-keyset 'ks )))

  (env-sigs [
      { 'key: 'operator
      ,'caps: [(marmalade-v2.collection-policy-v1.OPERATOR "collection:aHZrcOD_nHHHiEQgIhdfjcWfUKcD1dvsdG00tE4fAC8")]
      }])

  (expect "create a default token with collection-policy, quote-policy, non-fungible-policy, royalty-policy"
    true
    (create-token (read-msg 'token-id1) 0 "test-collection-size-uri1" (create-policies DEFAULT_COLLECTION_ROYALTY) ))

  (expect "create another token with collection-policy, quote-policy, non-fungible-policy, royalty-policy"
    true
    (create-token (read-msg 'token-id2) 0 "test-collection-size-uri2" (create-policies DEFAULT_COLLECTION_ROYALTY) ))
(rollback-tx)
